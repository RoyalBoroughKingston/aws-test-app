---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application that uses the ASP.NET Core framework running
  in Amazon Lambda.

Parameters:
  EnvironmentName:
    Type: String
    Default: 'development'
  
  BucketName:
    Type: String
    Default: 'ddt-build-files'

  Key:
    Type: String
    Default: 'aws-test-app/development/lambda.zip'

Conditions:
  IsDevelopment: !Equals [!Ref EnvironmentName, 'development']
  IsProduction: !Equals [!Ref EnvironmentName, 'production']

Resources:
  AspNetCoreIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambda_FullAccess
             
  DevelopmentFunction:
    Condition: IsDevelopment
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aws-test-app-development
      Handler: aws-test-app
      Runtime: dotnet6
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: Development
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref Key
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt AspNetCoreIamRole.Arn
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            Path: /dev
            Method: GET

  ProductionFunction:
    Condition: IsProduction
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aws-test-app-production
      Handler: aws-test-app
      Runtime: dotnet6
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT: Production
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref Key
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt AspNetCoreIamRole.Arn
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            Path: /prod
            Method: GET

Outputs:
  ApiURLDevelopment:
    Description: API URL for development environment
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"

  ApiURLProduction:
    Description: API URL for production environment
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
